/**********************************
Template method patter
模板方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。
模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
************************************/
public abstract class CaffeineBeverage {

	public void prepareRecipe() {
		boilWater();
		brew();
		pourInCup();
		addCondiments();
	}
	
	public void boilWater() {
		System.out.println("Boiling water");
	}
	
	public void pourInCup() {
		System.out.println("Pouring into cup");
	}
	
	public abstract void brew();
	
	public abstract void addCondiments();
}

public class Coffee extends CaffeineBeverage {

	@Override
	public void brew() {
		System.out.println("Dripping Coffee");
	}

	@Override
	public void addCondiments() {
		System.out.println("Adding Sugar and Milk");
	}
}

public class Tea extends CaffeineBeverage {

	@Override
	public void brew() {
		System.out.println("Steeping the tea");
	}

	@Override
	public void addCondiments() {
		System.out.println("Adding lemon");
	}
}

public class PatternDemo {
	
	public static void main(String[] args) {
		Tea tea = new Tea();
		tea.prepareRecipe();
		
		Coffee coffee = new Coffee();
		coffee.prepareRecipe();
	}
}

//钩子（hook）：允许子类控制父类的算法框架中的某个步骤是否被调用
public abstract class CaffeineBeverage {

	public void prepareRecipe() {
		boilWater();
		brew();
		pourInCup();
		if (condiments()) {
			addCondiments();
		}
	}
	
	public void boilWater() {
		System.out.println("Boiling water");
	}
	
	public void pourInCup() {
		System.out.println("Pouring into cup");
	}
	
	public boolean condiments() {
		return true;
	}
	
	public abstract void brew();
	
	public abstract void addCondiments();
}

//方法condiments就是一个hook，默认情况下返回true，加入调料，只要在子类覆盖这个方法，那么就可以修改返回值，控制是否加调料。
//修改Tea：
public class Tea extends CaffeineBeverage {

	@Override
	public void brew() {
		System.out.println("Steeping the tea");
	}

	@Override
	public void addCondiments() {
		System.out.println("Adding lemon");
	}

	@Override
	public boolean condiments() {
		return false;
	}
}
//现在运行结果就会变成Tea是不加调料的。

/**************************************************************
设计原理8：好莱坞原则：别调用我们，我们会调用你

为的是防止“依赖腐败”。依赖腐败情况，高层组件依赖低层组件，
低层组件依赖高层组件，高层组件又依赖边侧组件，边侧组件又依赖低层组件，
系统难以理解

钩子是运行低层组件挂钩到高层，但是由高层决定什么时候调用，防止腐败

比较模板方法模式、策略模式、工厂方法：

模板方法：子类决定如何实现算法中的步骤

策略：封装可互换的行为，然后使用委托来决定要采用哪一个行为

工厂方法：由子类决定实例化哪个具体类
*********************************************************/