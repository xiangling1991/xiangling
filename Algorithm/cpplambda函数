[capture](parameters) mutable ->return-type{statement}

[capture]:捕捉列表。捕捉列表总是出现在lambda函数的开始处。事实上，[]是lambda引出符。
编译器根据该引出符判断接下来的代码是否是lambda函数。捕捉列表能够捕捉上下文中的变量以供lambda函
数使用。
(parameters):参数列表。如果不需要参数传递，则可以联通括号()一起省略。
mutable:mutable修饰符。默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性，
在使用该修饰符时，参数列表不可省略(即使参数为空)。
->return-type:返回类型。用追踪返回类型形式声明函数的返回类型。出于方便，不需要返回值
的时候也可以连同符号->一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器
对返回类型进行推导。
{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。



捕捉列表由多个捕捉项组成，并以逗号分隔，主要有以下几种形式：
[var]表示值传递的方式捕捉变量var;
[=]表示值传递方式捕捉所有父作用域的变量(包括this);
[&var]表示引用传递捕捉变量;
[&]表示引用传递捕捉所有父作用域的变量(包括this);
[this]表示值传递方式捕捉当前的this指针。

note:
	但按值捕捉时，一旦变量被捕捉后，该变量在lambda中就当成常量使用，再次调用时，该值不变，
	即使传进来的值已经变化。

当lambda函数未捕获任何的变量时，可以与函数指针进行转换。


	int val;
	auto const_val_lambda = [=]() {val = 3;};//默认val为常量， 编译出错。
	auto mutable_val_lambda = [=]() mutable{ val = 3;};

	auto const_ref_lambda = [&] {val = 3;};
	auto const_param_lambda = [&](int v){v = 3;};